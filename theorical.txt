Javascript class
Classes are introduced in ES6 which looks similar to classes in other object oriented languages, such as Java,
PHP, etc., however they do not work exactly the same way. ES6 classes make it easier to create objects, 
implement inheritance by using the extends keyword, and reuse the code.

In JavaScript, classes are the special type of functions. We can define the class just like function 
declarations and function expressions.
The JavaScript class contains various class members within a body including methods or constructor. The 
class is executed in strict mode. So, the code containing the silent error or mistake throws an error.
The class syntax contains two components:

Class declarations
Class expressions

Class Declarations
A class can be defined by using a class declaration. A class keyword is used to declare a class with any 
particular name. According to JavaScript naming conventions, the name of the class always starts with an 
uppercase letter.

Getters and Setters
In JavaScript, getter methods get the value of an object and setter methods set the value of an object.
JavaScript classes may include getters and setters. You use the get keyword for getter methods and set for setter 
methods.

Javascript static method
The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an 
instance is not required to call the static method. These methods are called directly on the class itself.

Points to remember
The static keyword is used to declare a static method.
The static method can be of any name.
A class can contain more than one static method.
If we declare more than one static method with a similar name, the JavaScript always invokes the last one.
The static method can be used to create utility functions.
We can use this keyword to call a static method within another static method.
We cannot use this keyword directly to call a static method within the non-static method. In such case, we 
can call the static method either using the class name or as the property of the constructor.